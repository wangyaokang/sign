<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.wyk.sign.persistence.TaskInfoMapper">

	<resultMap type="com.wyk.sign.model.TaskInfo" id="taskInfoMap">
		<id property="id" column="id" javaType="long" />
		<result property="deadlineTime" column="deadline_time" />
		<result property="remark" column="remark" />
		<result property="status" column="status" />
		<association property="admin" javaType="com.wyk.sign.model.Administrator">
			<id property="id" column="admin_id"/>
			<result property="wxName" column="admin_wx_name" />
			<result property="wxAvatarUrl" column="admin_wx_avatar_url" />
			<result property="realName" column="admin_real_name" />
			<result property="userType" column="admin_user_type" />
			<result property="status" column="admin_status" />
		</association>
		<association property="class" javaType="com.wyk.sign.model.Classes">
			<id property="id" column="class_id"/>
			<result property="name" column="class_name" />
			<result property="status" column="class_status" />
		</association>
		<association property="course" javaType="com.wyk.sign.model.Course">
			<id property="id" column="course_id"/>
			<result property="name" column="course_name" />
			<result property="status" column="course_status" />
		</association>
	</resultMap>

	<sql id="selectSQL">
		select t.*,
			ad.wx_name as admin_wx_name,
			ad.wx_avatar_url as admin_wx_avatar_url,
			ad.real_name as admin_real_name,
			ad.user_type as admin_user_type,
			cl.name as class_name,
			cl.status as class_status,
			co.name as course_name,
			co.status as course_status
		 from ((tb_task_info t inner join tb_classes cl on t.class_id = cl.id)
		 		inner join tb_course co on t.course_id = co.id)
		 		inner join tb_admin ad as on t.admin_id = ad.id
	</sql>

	<!-- Base Mapper -->
	<select id="get" parameterType="hashmap" resultMap="taskInfoMap">
		<include refid="selectSQL" />
		<where>
			<if test="id != null">
				id = #{id}
			</if>
		</where>
		limit 0,1
	</select>

	<select id="query" resultMap="taskInfoMap">
		<include refid="selectSQL" />
	</select>

	<select id="queryByMap" parameterType="hashmap" resultMap="taskInfoMap">
		<include refid="selectSQL" />
		<where>
			<if test="admin.wxName != null">
				and wxName = #{admin.wxName}
			</if>
			<if test="admin.realName != null">
				and real_name = #{admin.realName}
			</if>
			<if test="class.name != null">
				and class_name = #{class.name}
			</if>
			<if test="course.name != null">
				and course_name = #{course.name}
			</if>
		</where>
	</select>

	<insert id="insert" parameterType="com.wyk.sign.model.TaskInfo"
		useGeneratedKeys="true" keyProperty="id">
		insert into tb_task_info (
		admin_id,
		course_id,
		class_id,
		deadline_time,
		remark,
		status)
		values
		(#{admin.id},
		#{course.id},
		#{class.id},
		#{deadlineTime},
		#{remark},
		#{status})
	</insert>

	<update id="update" parameterType="com.wyk.sign.model.TaskInfo">
		update tb_task_info set
		admin_id=#{admin.id},
		course_id=#{course.id},
		class_id=#{class.id},
		deadline_time=#{deadlineTime},
		remark=#{remark},
		status=#{status},
		modify_time=#{modifyTime}
		where id = #{id}
	</update>

	<update id="updateBatch" parameterType="List">
		<foreach collection="list" separator=";" item="info">
			update tb_task_info set
			admin_id=#{info.admin.id},
			course_id=#{info.course.id},
			class_id=#{info.class.id},
			deadline_time=#{info.deadlineTime},
			remark=#{info.remark},
			status=#{info.status},
			modify_time=#{info.modifyTime}
			where id = #{info.id}
		</foreach>
	</update>

	<delete id="delete" parameterType="com.wyk.sign.model.TaskInfo">
		delete from tb_task_info
		<where>
			<if test="id != null">
				id = #{id}
			</if>
		</where>
	</delete>

	<delete id="deleteByMap" parameterType="hashmap">
		delete from tb_task_info
		<where>
			<if test="id != null">
				id = #{id}
			</if>
		</where>
	</delete>
	<!-- End of Base Mapper -->

</mapper>